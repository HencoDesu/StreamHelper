@page "/Music/Settings"
@using StreamHelper.Integrations.Twitch.PubSub
@using StreamHelper.Integrations.Twitch.Data
@using StreamHelper.Core.Providers
@using StreamHelper.Integrations.Twitch.Services
@using StreamHelper.Core.Extensions
@using StreamHelper.Core.SongRequests.Data
@using StreamHelper.Integrations.Twitch.Configuration.User
@using TwitchLib.Api.Helix.Models.ChannelPoints
@using TwitchLib.Api.Interfaces
@inherits BaseComponent
@attribute [Authorize]
@inject IProvider<AuthInfo> AuthInfoProvider
@inject IProvider<IPubSubService> PubSubServiceProvider
@inject IProvider<RequestHistory> RequestHistoryProvider
@inject IProvider<ITwitchAPI> TwitchApiProvider
@inject IProvider<SongRequestRewardsSettings> SongRequestRewardSettingsProvider
@inject IRewardsMonitoringService RewardsMonitoringService

@implements IDisposable

<PageTitle>StreamHelper - Настройки музыки</PageTitle>

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <MudText Align="Align.Center" Typo="Typo.h6">Основные настройки:</MudText>
                <MudDivider DividerType="DividerType.Middle" Class="mb-3"/>

                <MudPaper Elevation="4" Class="pa-4" Style="width: 185px; height: 125px;">
                    <MudText Align="Align.Center">PubSub-сервис:</MudText>

                    <MudButton Variant="Variant.Filled"
                               Color="GetConnectionStatusColor()"
                               OnClick="ChangePubSubServiceState"
                               Size="Size.Large"
                               Class="mb-3"
                               Style="width: 150px; height: 75px;">
                        @GetConnectionStatusText()
                    </MudButton>
                </MudPaper>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;">
                <MudText Align="Align.Center" Typo="Typo.h6">Настройки наград:</MudText>
                <MudDivider DividerType="DividerType.Middle" Class="mb-3"/>

                <MudSelect T="CustomReward"
                           Label="Заказ трека"
                           AnchorOrigin="Origin.BottomCenter"
                           Value="CurrentSongReward"
                           ValueChanged="OnSongRewardChanged">
                    @foreach (var reward in SongRewards)
                    {
                        <MudSelectItem T="CustomReward" Value="@reward">@reward.Title</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="CustomReward"
                           Label="Пропуск трека"
                           AnchorOrigin="Origin.BottomCenter"
                           Value="CurrentSkipReward"
                           ValueChanged="OnSkipRewardChanged">
                    @foreach (var reward in SkipRewards)
                    {
                        <MudSelectItem T="CustomReward" Value="@reward">@reward.Title</MudSelectItem>
                    }
                </MudSelect>

            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 600px;">
                <MudText Align="Align.Center" Typo="Typo.h6">Ограничение заказов:</MudText>
                <MudDivider DividerType="DividerType.Middle" Class="mb-3"/>
                
                <MudNumericField HideSpinButtons="true" @bind-value="SongRequestRewardsSettings.SongMaxLengthInMinutes" Label="Ограничение по длине трека (мин)" Variant="Variant.Filled" Min="1" />
                
                <MudTextField T="string" 
                              Class="mt-3"
                              Label="Черный список" 
                              HelperText="Список слов через запятую. Треки в названии которых есть эти слова не будут воспроизведены, а баллы за заказ будут возвращены"
                              Variant="Variant.Outlined" 
                              @bind-Text="SongRequestRewardsSettings.Blacklist" 
                              Lines="20" />
            </MudPaper>
        </MudItem>

        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 100%">
                <MudText Align="Align.Center" Typo="Typo.h6">История заказов:</MudText>
                <MudDivider DividerType="DividerType.Middle" Class="mb-3"/>

                @foreach (var request in RequestHistory.History.Reverse())
                {
                    <MudPaper Elevation="4" Class="pa-4 mb-2" Style="height: 50px;">
                        <MudText Typo="Typo.body1">@request.RequestTime.ToShortTimeString(): @request.RequesterName заказал @request.SongAuthor - @request.SongName</MudText>
                    </MudPaper>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    private IDisposable? _connectionStatusChangedSubscription;
    private IDisposable? _requestHistoryUpdatedSubscription;

    private IPubSubService PubSubService { get; set; } = null!;
    private SongRequestRewardsSettings SongRequestRewardsSettings { get; set; } = null!;

    private List<CustomReward> SongRewards { get; set; } = new();
    private List<CustomReward> SkipRewards { get; set; } = new();

    private CustomReward? CurrentSongReward { get; set; }
    private CustomReward? CurrentSkipReward { get; set; }

    private RequestHistory RequestHistory { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (CurrentUser is null)
        {
            return;
        }

        await RewardsMonitoringService.SubscribeToSongRequestRewards(CurrentUser);

        PubSubService = await PubSubServiceProvider.Get(CurrentUser);
        RequestHistory = await RequestHistoryProvider.Get(CurrentUser);
        SongRequestRewardsSettings = await SongRequestRewardSettingsProvider.Get(CurrentUser);

        _connectionStatusChangedSubscription = PubSubService.ConnectionStatusChanged.SubscribeAsync(Redraw);
        _requestHistoryUpdatedSubscription = RequestHistory.HistoryAppended.SubscribeAsync(Redraw);

        var authInfo = await AuthInfoProvider.Get(CurrentUser);
        var twitchApi = await TwitchApiProvider.Get(CurrentUser);
        var rewards = await twitchApi.Helix.ChannelPoints.GetCustomRewardAsync(authInfo.UserId);

        SongRewards = rewards.Data.Where(r => r.IsUserInputRequired).ToList();
        CurrentSongReward = SongRewards.FirstOrDefault(r => r.Id == SongRequestRewardsSettings.RequestRewardId);

        SkipRewards = rewards.Data.Where(r => r.IsUserInputRequired is false).ToList();
        CurrentSkipReward = SkipRewards.FirstOrDefault(r => r.Id == SongRequestRewardsSettings.SkipRewardId);

        await Redraw();
    }

    private void ChangePubSubServiceState()
    {
        if (PubSubService?.ConnectionStatus is not ConnectionStatus.Disconnected)
        {
            return;
        }

        PubSubService.ConnectToChannel();
    }

    public void Dispose()
    {
        _connectionStatusChangedSubscription?.Dispose();
        _requestHistoryUpdatedSubscription?.Dispose();
    }

    private void OnSongRewardChanged(CustomReward selectedReward)
    {
        CurrentSongReward = selectedReward;
        SongRequestRewardsSettings.RequestRewardId = selectedReward.Id;
    }

    private void OnSkipRewardChanged(CustomReward selectedReward)
    {
        CurrentSkipReward = selectedReward;
        SongRequestRewardsSettings.RequestRewardId = selectedReward.Id;
    }

    private string GetConnectionStatusText()
        => PubSubService.ConnectionStatus switch 
        {
            ConnectionStatus.Disconnected => "Неактивен",
            ConnectionStatus.Connecting => "Подключение...",
            ConnectionStatus.Connected => "Активен",
            _ => "Неизвестно"};

    private Color GetConnectionStatusColor()
        => PubSubService.ConnectionStatus switch 
        {
            ConnectionStatus.Disconnected => Color.Default,
            ConnectionStatus.Connected => Color.Primary,
            _ => Color.Default
            };
}